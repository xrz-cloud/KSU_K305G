name: Build Kernel
on:
  watch:
    types: [started]

  workflow_dispatch:
     inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'https://github.com/Diva-Room/Miku_kernel_xiaomi_wayne'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'TDA'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'vendor/wayne_defconfig'
      KERNEL_FILE:
        description: 'Your kernel out image name'
        required: true
        default: 'Image.gz-dtb'
      CLANG_VERSION:
        description: 'Clang version'
        required: true
        default: 'r450784d'
      BUILD_EXTRA_COMMAND:
        description: 'Extra build commands(e.g. LLVM=1 LLVM_IAS=1)'
        required: false
        default: 'LD=ld.lld'
      DISABLE-LTO:
        description: 'Disable LTO'
        required: false
        default: 'false'
        type: boolean
      USE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: 'true'
        type: boolean
      MAKE_BOOT_IMAGE:
        description: 'Make boot image'
        required: false
        default: 'false'
        type: boolean
      SOURCE_BOOT_IMAGE:
        description: 'Your original boot image url'
        required: false
        default: 'https://raw.githubusercontent.com/xiaoleGun/KernelSU_action/main/boot/boot-wayne-from-Miku-UI-latest.img'

jobs:
  build:
    name: Build KernelSU to your kernel
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - uses: actions/checkout@v3
    - name: Setup Configuration
      run: |
        if [ $(cat config.env | grep "USE_CONFIG" | head -n 1 | cut -d "=" -f 2) = true ];then
            echo "KERNEL_SOURCE=$(cat config.env | grep "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_DEFCONFIG=$(cat config.env | grep "KERNEL_DEFCONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_FILE=$(cat config.env | grep "KERNEL_FILE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "CLANG_VERSION=$(cat config.env | grep "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "BUILD_EXTRA_COMMAND=$(cat config.env | grep "EXTRA_BUILD_COMMAND" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            echo "DISABLE-LTO=$(cat config.env | grep "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "USE_KERNELSU=$(cat config.env | grep "USE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "USE_KPROBES=$(cat config.env | grep "USE_KPROBES" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "MAKE_BOOT_IMAGE=$(cat config.env | grep "MAKE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "SOURCE_BOOT_IMAGE=$(cat config.env | grep "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        else
            echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
            echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
            echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
            echo "KERNEL_FILE=${{ github.event.inputs.KERNEL_FILE }}" >> $GITHUB_ENV
            echo "CLANG_VERSION=${{ github.event.inputs.CLANG_VERSION }}" >> $GITHUB_ENV
            echo "BUILD_EXTRA_COMMAND=${{ github.event.inputs.BUILD_EXTRA_COMMAND }}" >> $GITHUB_ENV
            echo "DISABLE-LTO=${{ github.event.inputs.DISABLE-LTO }}" >> $GITHUB_ENV
            echo "USE_KERNELSU=${{ github.event.inputs.USE_KERNELSU }}" >> $GITHUB_ENV
            echo "USE_KPROBES=${{ github.event.inputs.USE_KPROBES }}" >> $GITHUB_ENV
            echo "MAKE_BOOT_IMAGE=${{ github.event.inputs.MAKE_BOOT_IMAGE }}" >> $GITHUB_ENV
            echo "SOURCE_BOOT_IMAGE=${{ github.event.inputs.SOURCE_BOOT_IMAGE }}" >> $GITHUB_ENV
        fi

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: Download mkbootimg tools
      if: ${{ env.MAKE_BOOT_IMAGE }} == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

    - name: Make boot image
      if: ${{ env.MAKE_BOOT_IMAGE }} == 'true'
      env: 
        FORMAT_MKBOOTING: $(tools/unpack_bootimg.py --boot_img=boot.img --format mkbootimg)
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget -O boot.img ${{ env.SOURCE_BOOT_IMAGE }}
        tools/unpack_bootimg.py --boot_img boot.img
        echo "FORMAT_MKBOOTING=$(tools/unpack_bootimg.py --boot_img=boot.img --format mkbootimg)" >> $GITHUB_ENV
        tools/mkbootimg.py ${{ env.MAKE_BOOT_IMAGE_CMDLINE }} -o boot2.img

    - name: Upload boot image
      uses: actions/upload-artifact@v3
      with:
        name: boot${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/boot2.img
